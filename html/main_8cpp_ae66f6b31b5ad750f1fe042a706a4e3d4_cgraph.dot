digraph "main"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="main",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="bitSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a208b1eca3046feb547bab36e762a9287",tooltip="Bit Sort This function calls on the bitronic sort function to add in the applicable values."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="bitronicSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#ab692ad9d211b4c1cf04ee3211ed707cf",tooltip="Bitronic Sort This function will sort an integer array by use of a Bitronic Sort."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="bitronicMerge",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#ac387bdfaa151830d8648ada60668d91c",tooltip="Bitronic Merge This function will merge two arrays as needed for the Bitronic Sort."];
  Node4 -> Node4 [id="edge4_Node000004_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 -> Node5 [id="edge5_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="compAndSwap",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a5d1be08b0c289000f8cf9b9e4b371686",tooltip="CompAndSwap This function will compare two integers and swap if necessary."];
  Node3 -> Node3 [id="edge6_Node000003_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node6 [id="edge7_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="bubbleSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#ada238b3b8e918a24359a8a189418684d",tooltip="Bubble Sort This function will sort an integer array by use of an bubble sort."];
  Node1 -> Node7 [id="edge8_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="combSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a61192384144347720d3bb3d9edba1450",tooltip="Comb Sort This function will sort an integer array by use of an Comb sort."];
  Node7 -> Node8 [id="edge9_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="getNextGap",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a33585a59557d010796f15647fdc2a3f5",tooltip="getNextGap This function will get the next gap as required for the comb sort"];
  Node1 -> Node9 [id="edge10_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="heapSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a0ac302b8b71e1de7d6e8e66c93560988",tooltip="Heap Sort This function will sort an integer array by use of an Heap sort."];
  Node9 -> Node10 [id="edge11_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="heapify",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a590bdc7c45487a2d82ff73c7d2357d49",tooltip="Heapify This function will be the guts of the Heap sort."];
  Node10 -> Node10 [id="edge12_Node000010_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node11 [id="edge13_Node000001_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="insertionSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#aab59bca574fd3bce4531bb80ca3bad7a",tooltip="Insertion Sort This function will sort an integer array by use of an insertion sort."];
  Node1 -> Node12 [id="edge14_Node000001_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="mergeSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a2d2719b8c2d555143bc9b458128803c9",tooltip="Merge Sort This function will send the information to the merge function."];
  Node12 -> Node13 [id="edge15_Node000012_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="merge",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a1fdfec0c2e087ed7c6a339cde128260a",tooltip="Merge function This function will sort an array via merging."];
  Node12 -> Node12 [id="edge16_Node000012_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node14 [id="edge17_Node000001_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="pigeonHoleSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a8400c58c464d0cefc681a841cac47f25",tooltip="Pigeonhole Sort This function will sort an integer array by use of a Pigeonhole sort."];
  Node1 -> Node15 [id="edge18_Node000001_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="radixSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a08c15d63cf3fc7702bfb471b9e7014c9",tooltip="Radix Sort This function will sort an integer array by use of a Radix sort."];
  Node15 -> Node16 [id="edge19_Node000015_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="countSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a100156697547b8522ad650270becc7bc",tooltip="Count Sort This function will sort an integer array by use of a count sort."];
  Node15 -> Node17 [id="edge20_Node000015_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="getMax",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a52a30264585194fcd85c8dd7429eed66",tooltip="getMax This function will find the max integer in an array"];
  Node1 -> Node18 [id="edge21_Node000001_Node000018",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="selectionSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#ad1f6d5159c910aba6bb45f9c6e5c43e7",tooltip="Selection Sort This function will sort an integer array by use of a Selection sort."];
  Node1 -> Node19 [id="edge22_Node000001_Node000019",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="timSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a1209231b7fe4da35efd9acb9f7bb516e",tooltip="Tim Sort This function will sort an integer array by use of a Tim Sort."];
  Node19 -> Node20 [id="edge23_Node000019_Node000020",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="insertTimSort",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#ac4196647cdda2c833e34c8eb47dbab3d",tooltip="Insert Tim Sort This function will sort an array via insertion for the Tim Sort function."];
  Node19 -> Node21 [id="edge24_Node000019_Node000021",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="mergeTim",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$main_8cpp.html#a559d217e03d51605e71120242a1bb278",tooltip="Merge Tim Sort This function will sort an array via merging for the Tim Sort function."];
}
